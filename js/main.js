(() => {
  console.log('fired!')


   function logKeyCode(event) {
    //debugger;
    //event is an object that is generated by any event
    //it contains all of the info an=bout the event, what
    // element triggered it, where it occured on the page etc.
    console.log(event.keyCode);
    let currentKey = document.querySelector(`div[data-key="${event.keyCode}"]`);

    // is there's no matching div that key,then exit.
    if (!currentKey) return;
    // apply the playing class to the current div (the matching ketCode)
      currentKey.classList.add('playing');

      // play the audio that goes with div
      let currentAudioClip = document.querySelector(`audio[data-key="${event.keyCode}"]`);
      currentAudioClip.currentTime = 0;
      currentAudioClip.play();
    }

    function removePlayingClass(event) {
      //listen for the transition to end, and then remove the playing class from the current keys

      //I need a transition that only fires once so that I only run this function once => transform? might work?
      if(event.propertyName !== "transform") return;
        // event.target is the target of the current event -> in this case the div, because that's the element
        // that's transitioning
       console.log('transform transition is done!');
       event.target.classList.remove('playing');
      //debugger;
    }

    const keys = Array.from(document.querySelectorAll('.key'));
    keys.forEach(key => key.addEventListener('transitionend', removePlayingClass));

    // try to get the keyboard keypress events
    window.addEventListener("keydown", logKeyCode);
    // window.addEventListener("keyup", resetSound);

  })();

    // let currentAudioClip = document.querySelector(`audio[data-key="${event.keyCode}"]`);

    // if we make a successful match, then play that matching audio element
    // *note 참고할 것.
    // a ! (bang operator) is a test for a falsy value => means "not"
    // if (!currentAudioClip) {
      // return;
      //currentAudioClip.play();
    // } else {
      // there is no match, so no audio element to play -> do nothing
      // a return will make a function exit without breaking anything
      // currentAudioClip.currentTime = 0;
      // currentAudioClip.play();
      //return;
    // }
// }

  // function resetSound(event) {
    // I need this to reset the audio, but only if i can find matching element
    // the event has the keycode - i need to make sure i find the audio first, and then reset it.

    // audio has a currentTime property - reset that to 0?
    // need to check a condition with an if statement?
    //let currentAudioClip = document.querySelector(`audio[data-key="${event.keyCode}"]`);

    //if (!currentAudioClip) {
      //return;
  //  } else {
    //  currentAudioClip.currentTime = 0;
//  }
// }
  // try to get the keyboard keypress events
